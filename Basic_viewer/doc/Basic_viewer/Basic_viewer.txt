namespace CGAL {
/*!

\mainpage User Manual
\anchor Chapter_Basic_viewer
\anchor ChapterBasicViewer

\author Guillaume Damiand, Mostafa Ashraf
\cgalAutoToc

\section Introduction

The basic viewer package appears to serve as a foundation to provide a small interactive visualization tools of all CGAL data structures, such as Arrangement_on_surface_2, Boolean_set_operations_2, Linear_cell_complex, Nef_3, Periodic_2_triangulation_2, Point_set_3, Polygon, Polyhedron, Straight_skeleton_2, Surface_mesh, Triangulation_2, Triangulation_3, Voronoi_diagram_2, and more. The functionality of the package is to renders various geometric elements such as points, segments, rays, lines, faces, etc.

The most basic usage of the basic viewer is the use of the global `CGAL::draw` function. There is one draw function for each package CGAL. Such a call opens a new interactive window showing the given model and allowing to navigate in the scene, show or hide some specific cells, show the interior of the model if any...

The drawing can be tuned using a `CGAL::Graphics_scene_option` allowing to change the color of some cells or hide some cells.

More complex usage can be achieved by using the `CGAL::Graphics_scene` class. Several representation of different CGAL data structures can be added in a same `CGAL::Graphics_scene` allowing to visualize different models in a same window. Like for the draw function, the drawing parameters can be tune thanks to the `CGAL::Graphics_scene_option`.

Two classes are based on Qt. (1) `CGAL::Qt::Basic_viewer` is a Qt widget that inherits from `QGLViewer` (libQGLViewer is an open source C++ library based on Qt that eases the creation of OpenGL 3D viewers). (2) `CGAL::Qt::QApplication_and_basic_viewer` which regroups a `Qt::QApplication` and a `CGAL::Basic_viewer`.

\section SoftwareDesignClassDiagam Software Design

The diagram in \cgalFigureRef{fig_basic_viewer_diagramme_class} shows the different classes of the package.

\cgalFigureBegin{fig_basic_viewer_diagramme_class,basic_viewer_diagramme_class.svg}
UML diagram of the main classes of the package.
\cgalFigureEnd

TODO links the classes with the different sections where they will be explained

\section Basic Usage: global `CGAL::draw` functions

A first simple solution provide to draw the different data structures of CGAL is the use of global `CGAL::draw` functions. This function is templated by the type of the data structure to draw. The following example shows a basic use of this function.

\cgalExample{Basic_viewer/draw_lcc.cpp}

This example creates a 3D linear cell complex, fill it by creating an hexahedron, and draw it using the basic viewer. The result of the viewing is shown in the following figure.

\cgalFigureBegin{basic_viewer_ex1,lcc_draw.png}
Example of drawing of a 3D LCC.
\cgalFigureEnd

Users can interact with the viewer using some specific keys or mouse interactions. You can press 'h' key to visualize an help showing all the different shortcuts and mouse interactions. The main functionalities of the viewer are:

<ul>
<li> Versatile Rendering:

The viewer supports the rendering of various geometric elements, such as points, edges, faces, rays, and lines.
Different rendering modes, including mono and colored representations, are available for these elements.</li>

<li> Camera Control:

The viewer allows users to switch between 2D and 3D viewing modes, adjusting the camera accordingly.
Camera settings, such as orthographic or perspective projection, can be configured based on the dimensionality of the scene.</li>

<li> User Interaction:

Users can interact with the viewer through keyboard inputs, enabling them to control rendering options, toggle the display of elements, and adjust visual parameters.
Key presses are mapped to specific actions, such as toggling the clipping plane, changing rendering modes, adjusting the size of elements, and modifying ambient light color.</li>

<li> Clipping Plane:

The viewer includes support for a clipping plane, allowing users to selectively render parts of the scene.
The clipping plane can be toggled on and off, and its rendering style can be modified (solid, wireframe, etc.).</li>
</ul>

\subsection GraphicSceneContinue Tune the drawing thanks to `CGAL::Graphics_scene_options`

There is one specialization of each draw function that takes a graphics scene options as parameter, allowing to tune the drawing.

The Graphics_scene_options class is responsible for providing a set of options and customization parameters for rendering geometric structures in a graphics scene. Its main purpose is to allow users to control the visual appearance of various cells such as vertices, edges, faces, and volumes in a graphical representation of a given data structure.

The following example shows how to use a graphics scene options to tune the drawing of a surface mesh. In this example, we define our own class `My_graphics_scene_options` that inherits from `CGAL::Graphics_scene_options` to get all the default parameters. In this class, we only override the two methods `colored_vertex` and `vertex_color` to draw all vertices in color, and chose randomly green or blue colors for one out of two vertices.

\cgalExample{Basic_viewer/draw_surface_mesh_vcolor.cpp}

The result of this example can be shown in \cgalFigureRef{basic_viewer_ex2}.

\cgalFigureBegin{basic_viewer_ex2,draw_surface_mesh_vcolor.png}
Example of tuned drawing of a 3D surface mesh where some vertex colors are changed.
\cgalFigureEnd


The drawing options can depend on the cells. We illustrate this possibility of the following example which compute a color for each face depending on its height.

\cgalExample{Basic_viewer/draw_surface_mesh_height.cpp}

The result of this example can be shown in \cgalFigureRef{basic_viewer_ex3} where we can see that all faces in a same height share the same color.

\cgalFigureBegin{basic_viewer_ex3,draw_surface_height.png}
Example of mesh drawing with a color for each face computed thanks to its height.
\cgalFigureEnd




















ICICICI


\section  Graphic_Scene

The Graphics_scene class appears to be a container class responsible for managing CGAL data structures and handling buffers for various geometric elements, such as points, segments, rays, lines, and faces by fill data in given graphic buffer.

Draw two different CGAL data-structures in a same viewer

\cgalExample{Basic_viewer/draw_mesh_and_points.cpp}


\subsection GraphicSceneClass key components and functionality of this class:
<OL>

<LI> Buffer Management:

<OL>
<LI> The class manages buffers for different geometric elements, including mono and colored versions of points, segments, rays, lines, and faces.
<LI> Buffers are stored in the arrays array, which holds vectors of BufferType (defaulted to float), and each buffer is initialized in the constructor.
</OL>

<LI> Bounding Box:
<OL>
<LI> The class maintains a bounding box (m_bounding_box) that encompasses all the geometric elements in the scene.
<LI> The bounding box can be initiated and updated based on the elements added to the scene.
</OL>

<LI> Adding Geometric Elements:
<OL>
<LI> The class provides template member functions (add_point, add_segment, add_ray, etc.) for adding various geometric elements to the corresponding buffers.
<LI> It supports both mono and colored versions of these elements, allowing for the addition of color information.
</OL>

<LI> Face Handling:
<OL>
<LI> The class supports the creation of faces by providing methods such as face_begin, add_point_in_face, and face_end.
<LI> Faces can be either mono or colored, and they are constructed by adding points to the corresponding face buffers.
</OL>

<LI> Normal Handling:
<OL>
<LI> Normals for faces are handled separately for smooth and flat shading, and they are part of the normal buffers.
</OL>

<LI> Text Handling:
<OL>
<LI> The class maintains a vector of text elements (m_texts), where each text element is associated with a 3D point in the scene.
<LI> Text elements can be added using the add_text member function.
</OL>

<LI> Utility Functions:
<OL>
<LI> The class provides utility functions such as checking if a face has started (a_face_started), clearing all buffers (clear), and determining if the scene is empty.
</OL>

<LI> Coordinate System Information:
<OL>
<LI> The class contains functions to check if the data structure lies on a particular plane (XY, XZ, or YZ), providing information about the coordinate system.
</OL>

<LI> Local Coordinate Transformations:
<OL>
<LI> There are template functions (get_local_point and get_local_vector) for transforming CGAL points and vectors into a local coordinate system (Local_kernel).
</OL>

<LI> Size and Dimensionality:
<OL>
<LI> Functions like get_size_of_index and number_of_elements provide information about the size and dimensionality of buffers.
</OL>

<LI> Miscellaneous:
<OL>
<LI> The class allows for reversing all normals in the scene using the reverse_all_normals function.
<LI> The empty function checks whether the scene is empty.
<LI> Functions like has_zero_x, has_zero_y, and has_zero_z check if any element in the scene has a zero value in a specific coordinate.
</OL>

</OL>

This class provides a comprehensive interface for managing and manipulating geometric data in a 3D scene, facilitating the rendering and interaction of complex scenes in a graphics application.


\section Use the Qt widget CGAL::Qt::Basic_viewer

\cgalExample{Basic_viewer/draw_several_windows.cpp}

\section Add some small interactions with the viewer

\cgalExample{Basic_viewer/draw_surface_mesh_small_faces.cpp}

*/

} /* namespace CGAL */

